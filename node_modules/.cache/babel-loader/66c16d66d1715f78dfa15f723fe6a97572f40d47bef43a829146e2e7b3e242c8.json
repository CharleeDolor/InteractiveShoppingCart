{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    prod: {\n      required: true,\n      type: String\n    },\n    item: {\n      required: true,\n      type: Object\n    },\n    index: {\n      type: Number\n    },\n    list: {\n      type: Array\n    }\n  },\n  methods: {\n    actionBind(val, item = {\n      name: \"\",\n      price: \"\"\n    }, index = 0, items = null) {\n      if (val === \"Update Quantity\") {\n        let item = items[index];\n        let newQuantity = parseInt(prompt('Edit the quantity:', item.quantity));\n        if (!isNaN(newQuantity)) {\n          item.quantity = newQuantity;\n        } else {\n          alert(\"Invalid quantity\");\n          return;\n        }\n        alert(\"Successfully updated\");\n      }\n      if (val === \"Remove\") {\n        let willDelete = confirm(\"Deleting \" + item.name);\n        if (willDelete) {\n          items.splice(index, 1);\n          alert(item.name + \" successfully removed.\");\n        } else {\n          alert(\"Delete cancelled\");\n        }\n      }\n      if (val === \"Add To Cart\") {\n        let qty = parseInt(prompt(\"Enter Quantity for \" + item.name + \": \"));\n        if (!isNaN(qty)) {\n          let isExist = false;\n          this.$addedToCart.forEach(each => {\n            if (each.name === item.name) {\n              each.quantity += qty;\n              isExist = true;\n            }\n          });\n          if (!isExist) {\n            this.$addedToCart.push({\n              name: item.name,\n              price: item.price,\n              quantity: qty\n            });\n          }\n          alert('Successfully added to cart');\n        } else {\n          alert('Invalid quantity');\n        }\n      }\n      if (val === \"Update\") {\n        let previousName = item.name;\n        let newName = prompt('Enter the new name:', item.name);\n        let newPrice = parseFloat(prompt('Enter the new price:', item.price));\n        if (newName && !isNaN(newPrice)) {\n          item.name = newName;\n          item.price = newPrice;\n        } else {\n          alert('Update fail');\n          return;\n        }\n        this.$addedToCart.forEach(each => {\n          if (each.name === previousName) {\n            each.name = newName;\n            each.price = newPrice;\n          }\n        });\n        alert(\"Updated sucessfully\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","prod","required","type","String","item","Object","index","Number","list","Array","methods","actionBind","val","name","price","items","newQuantity","parseInt","prompt","quantity","isNaN","alert","willDelete","confirm","splice","qty","isExist","$addedToCart","forEach","each","push","previousName","newName","newPrice","parseFloat"],"sources":["C:\\Users\\User\\Desktop\\InteractiveShoppingCart\\src\\components\\ActionButton.vue"],"sourcesContent":["<template>\r\n    <button id=\"btnAction\" @click=\"actionBind(\r\n        this.prod,\r\n        this.item,\r\n        this.index,\r\n        this.list\r\n    )\">{{ this.prod }}</button>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    props: {\r\n        prod: {\r\n            required: true,\r\n            type: String\r\n        },\r\n\r\n        item: {\r\n            required: true,\r\n            type: Object\r\n        },\r\n\r\n        index: {\r\n            type: Number\r\n        },\r\n\r\n        list: {\r\n            type: Array\r\n        }\r\n\r\n    },\r\n    methods: {\r\n        actionBind(\r\n            val, \r\n            item = { name: \"\", price: \"\" }, \r\n            index = 0, \r\n            items = null\r\n        ) {\r\n            if (val === \"Update Quantity\") {\r\n\r\n                let item = items[index];\r\n                let newQuantity = parseInt(prompt('Edit the quantity:', item.quantity));\r\n\r\n                if (!isNaN(newQuantity)) {\r\n                    item.quantity = newQuantity;\r\n                } else {\r\n                    alert(\"Invalid quantity\");\r\n                    return;\r\n                }\r\n\r\n                alert(\"Successfully updated\");\r\n            }\r\n\r\n            if (val === \"Remove\") {\r\n                \r\n                let willDelete = confirm(\"Deleting \" + item.name);\r\n                if(willDelete){\r\n                    items.splice(index, 1);\r\n                    alert(item.name + \" successfully removed.\");\r\n                } else {\r\n                    alert(\"Delete cancelled\");\r\n                }\r\n                \r\n            }\r\n\r\n            if (val === \"Add To Cart\") {\r\n                let qty = parseInt(prompt(\"Enter Quantity for \" + item.name + \": \"));\r\n\r\n                if (!isNaN(qty)) {\r\n                    let isExist = false;\r\n                    this.$addedToCart.forEach(each => {\r\n                        if (each.name === item.name) {\r\n                            each.quantity += qty;\r\n                            isExist = true;\r\n                        }\r\n                    });\r\n\r\n                    if (!isExist) {\r\n                        this.$addedToCart.push({ name: item.name, price: item.price, quantity: qty });\r\n                    }\r\n\r\n                    alert('Successfully added to cart');\r\n                } else {\r\n                    alert('Invalid quantity');\r\n                }\r\n            }\r\n\r\n            if (val === \"Update\") {\r\n                let previousName = item.name;\r\n                let newName = prompt('Enter the new name:', item.name);\r\n                let newPrice = parseFloat(prompt('Enter the new price:', item.price));\r\n\r\n                if (newName && !isNaN(newPrice)) {\r\n                    item.name = newName;\r\n                    item.price = newPrice;\r\n                } else {\r\n                    alert('Update fail');\r\n                    return;\r\n                }\r\n\r\n                this.$addedToCart.forEach(each => {\r\n                    if (each.name === previousName) {\r\n                        each.name = newName;\r\n                        each.price = newPrice;\r\n                    }\r\n                });\r\n\r\n                alert(\"Updated sucessfully\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}