{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    prod: {\n      required: true,\n      type: String\n    },\n    item: {\n      required: true,\n      type: Object\n    },\n    index: {\n      type: Number\n    },\n    list: {\n      type: Array\n    }\n  },\n  methods: {\n    updateQuantity(items, index) {\n      let item = items[index];\n      let newQuantity = parseInt(prompt('Edit the quantity:', item.quantity));\n      if (!isNaN(newQuantity)) {\n        item.quantity = newQuantity;\n      } else {\n        alert(\"Invalid quantity\");\n        return;\n      }\n      alert(\"Successfully updated\");\n    },\n    removeItem(item, items, index) {\n      let willDelete = confirm(\"Deleting \" + item.name);\n      if (willDelete) {\n        items.splice(index, 1);\n        alert(item.name + \" successfully removed.\");\n      } else {\n        alert(\"Delete cancelled\");\n      }\n    },\n    addToCart(item) {\n      let qty = parseInt(prompt(\"Enter Quantity for \" + item.name + \": \"));\n      if (!isNaN(qty)) {\n        let isExist = false;\n        this.$addedToCart.forEach(each => {\n          if (each.name === item.name) {\n            each.quantity += qty;\n            isExist = true;\n          }\n        });\n        if (!isExist) {\n          this.$addedToCart.push({\n            name: item.name,\n            price: item.price,\n            quantity: qty\n          });\n        }\n        alert('Successfully added to cart');\n      } else {\n        alert('Invalid quantity');\n      }\n    },\n    updateItem(item) {\n      let previousName = item.name;\n      let newName = prompt('Enter the new name:', item.name);\n      let newPrice = parseFloat(prompt('Enter the new price:', item.price));\n      if (newName && !isNaN(newPrice)) {\n        item.name = newName;\n        item.price = newPrice;\n      } else {\n        alert('Update fail');\n        return;\n      }\n      this.$addedToCart.forEach(each => {\n        if (each.name === previousName) {\n          each.name = newName;\n          each.price = newPrice;\n        }\n      });\n      alert(\"Updated sucessfully\");\n    },\n    /**\r\n     * Bind an action based on the value of val parameter.\r\n     */\n    bindAction(val, item = {\n      name: \"\",\n      price: \"\"\n    }, index = 0, items = null) {\n      /**\r\n       * Check if val is equals to \"Update Quantity\".\r\n       * This means that this button is in update quantity mode\r\n       */\n      if (val === \"Update Quantity\") {\n        //execute updateQuantity method declared in this component\n        this.updateQuantity(items, index);\n      }\n\n      /**\r\n       * Check if val is equals to \"Remove\"\r\n       * This means that this button is in remove mode\r\n       */\n      if (val === \"Remove\") {\n        //execute removeItem method declared in this component\n        this.removeItem(item, items, index);\n      }\n\n      /**\r\n       * Check if val is equals to \"Remove\"\r\n       * This means that this button is in remove mode\r\n       */\n      if (val === \"Add To Cart\") {\n        //execute addToCart method declared in this component\n        this.addToCart(item);\n      }\n      if (val === \"Update\") {\n        //execute updateItem method declared in this component\n        this.updateItem(item);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","prod","required","type","String","item","Object","index","Number","list","Array","methods","updateQuantity","items","newQuantity","parseInt","prompt","quantity","isNaN","alert","removeItem","willDelete","confirm","name","splice","addToCart","qty","isExist","$addedToCart","forEach","each","push","price","updateItem","previousName","newName","newPrice","parseFloat","bindAction","val"],"sources":["C:\\Users\\User\\Desktop\\InteractiveShoppingCart\\src\\components\\ActionButton.vue"],"sourcesContent":["<template>\r\n    <button id=\"btnAction\" @click=\"bindAction(\r\n        this.prod,\r\n        this.item,\r\n        this.index,\r\n        this.list\r\n    )\">{{ this.prod }}</button>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    props: {\r\n        prod: {\r\n            required: true,\r\n            type: String\r\n        },\r\n\r\n        item: {\r\n            required: true,\r\n            type: Object\r\n        },\r\n\r\n        index: {\r\n            type: Number\r\n        },\r\n\r\n        list: {\r\n            type: Array\r\n        }\r\n\r\n    },\r\n    methods: {\r\n\r\n        updateQuantity(items, index) {\r\n            let item = items[index];\r\n            let newQuantity = parseInt(prompt('Edit the quantity:', item.quantity));\r\n\r\n            if (!isNaN(newQuantity)) {\r\n                item.quantity = newQuantity;\r\n            } else {\r\n                alert(\"Invalid quantity\");\r\n                return;\r\n            }\r\n\r\n            alert(\"Successfully updated\");\r\n        },\r\n\r\n        removeItem(item, items, index) {\r\n            let willDelete = confirm(\"Deleting \" + item.name);\r\n            if (willDelete) {\r\n                items.splice(index, 1);\r\n                alert(item.name + \" successfully removed.\");\r\n            } else {\r\n                alert(\"Delete cancelled\");\r\n            }\r\n        },\r\n\r\n        addToCart(item) {\r\n            let qty = parseInt(prompt(\"Enter Quantity for \" + item.name + \": \"));\r\n\r\n            if (!isNaN(qty)) {\r\n                let isExist = false;\r\n                this.$addedToCart.forEach(each => {\r\n                    if (each.name === item.name) {\r\n                        each.quantity += qty;\r\n                        isExist = true;\r\n                    }\r\n                });\r\n\r\n                if (!isExist) {\r\n                    this.$addedToCart.push({ name: item.name, price: item.price, quantity: qty });\r\n                }\r\n\r\n                alert('Successfully added to cart');\r\n            } else {\r\n                alert('Invalid quantity');\r\n            }\r\n        },\r\n\r\n        updateItem(item) {\r\n            let previousName = item.name;\r\n            let newName = prompt('Enter the new name:', item.name);\r\n            let newPrice = parseFloat(prompt('Enter the new price:', item.price));\r\n\r\n            if (newName && !isNaN(newPrice)) {\r\n                item.name = newName;\r\n                item.price = newPrice;\r\n            } else {\r\n                alert('Update fail');\r\n                return;\r\n            }\r\n\r\n            this.$addedToCart.forEach(each => {\r\n                if (each.name === previousName) {\r\n                    each.name = newName;\r\n                    each.price = newPrice;\r\n                }\r\n            });\r\n\r\n            alert(\"Updated sucessfully\");\r\n        },\r\n\r\n        /**\r\n         * Bind an action based on the value of val parameter.\r\n         */\r\n        bindAction(\r\n            val,\r\n            item = { name: \"\", price: \"\" },\r\n            index = 0,\r\n            items = null\r\n        ) {\r\n            /**\r\n             * Check if val is equals to \"Update Quantity\".\r\n             * This means that this button is in update quantity mode\r\n             */\r\n            if (val === \"Update Quantity\") {\r\n\r\n                //execute updateQuantity method declared in this component\r\n                this.updateQuantity(items, index)\r\n            }\r\n\r\n            /**\r\n             * Check if val is equals to \"Remove\"\r\n             * This means that this button is in remove mode\r\n             */\r\n            if (val === \"Remove\") {\r\n                //execute removeItem method declared in this component\r\n                this.removeItem(item, items, index);\r\n            }\r\n\r\n            /**\r\n             * Check if val is equals to \"Remove\"\r\n             * This means that this button is in remove mode\r\n             */\r\n            if (val === \"Add To Cart\") {\r\n                //execute addToCart method declared in this component\r\n                this.addToCart(item);\r\n            }\r\n\r\n            if (val === \"Update\") {\r\n                //execute updateItem method declared in this component\r\n                this.updateItem(item)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}