{"ast":null,"code":"export default {\n  data() {\n    return {\n      tasks: this.$tasks\n    };\n  },\n  methods: {\n    test() {\n      alert();\n    },\n    deleteTask(index) {\n      /**\r\n       * if taskStatus is !false,\r\n       *  this means that this task is not done yet\r\n       *  and will not be able to delete\r\n       */\n      if (!this.tasks[index].taskStatus) {\n        alert(\"Task is unfinished\");\n        return;\n      }\n      let conf = confirm(\"Deleting task \" + this.tasks[index].taskName + \"?\");\n      if (conf) {\n        alert(\"Task \" + this.tasks[index].taskName + \" Deleted\");\n        this.$tasks = this.tasks.splice(index, 1);\n      } else {\n        alert(\"Delete cancelled\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","tasks","$tasks","methods","test","alert","deleteTask","index","taskStatus","conf","confirm","taskName","splice"],"sources":["C:\\Users\\User\\Desktop\\case-study\\task-management-system\\src\\components\\TaskList.vue"],"sourcesContent":["<template>\r\n    <div class=\"taskList\">\r\n        <h3>All tasks</h3>\r\n        <table>\r\n            <tr>\r\n                <th>Task Name</th>\r\n                <th>Task Deadline</th>\r\n                <th>Urgency</th>\r\n                <th>Status</th>\r\n                <th>Action</th>\r\n            </tr>\r\n\r\n            <tr v-for=\"(task, index) in this.tasks\" v-bind:key=\"index\" @click=\"test()\">\r\n                <td>{{ task.taskName }}</td>\r\n                <td>{{ task.taskDate }}</td>\r\n                <td>{{ task.taskPriority }}</td>\r\n                <td v-if=\"task.taskStatus\">Finished</td>\r\n                <td v-else>Not Finished</td>\r\n                <td v-on:click.stop=\"\">\r\n                    <button @click=\"deleteTask(index)\">\r\n                        Delete\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n\r\n    data() {\r\n        return {\r\n            tasks: this.$tasks\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        test(){\r\n            alert()\r\n        },\r\n        deleteTask(index){\r\n            /**\r\n             * if taskStatus is !false,\r\n             *  this means that this task is not done yet\r\n             *  and will not be able to delete\r\n             */\r\n            if(!this.tasks[index].taskStatus){\r\n                alert(\"Task is unfinished\");\r\n                return;\r\n            }\r\n\r\n            let conf = confirm(\"Deleting task \" + this.tasks[index].taskName + \"?\");\r\n            if(conf){\r\n                alert(\"Task \" + this.tasks[index].taskName + \" Deleted\");\r\n                this.$tasks = this.tasks.splice(index, 1);\r\n            } else {\r\n                alert(\"Delete cancelled\");\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.taskList{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n}\r\n</style>"],"mappings":"AA8BA,eAAe;EAEXA,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,IAAI,CAACC;IAChB;EACJ,CAAC;EAEDC,OAAO,EAAE;IACLC,IAAIA,CAAA,EAAE;MACFC,KAAK,CAAC;IACV,CAAC;IACDC,UAAUA,CAACC,KAAK,EAAC;MACb;;;;;MAKA,IAAG,CAAC,IAAI,CAACN,KAAK,CAACM,KAAK,CAAC,CAACC,UAAU,EAAC;QAC7BH,KAAK,CAAC,oBAAoB,CAAC;QAC3B;MACJ;MAEA,IAAII,IAAG,GAAIC,OAAO,CAAC,gBAAe,GAAI,IAAI,CAACT,KAAK,CAACM,KAAK,CAAC,CAACI,QAAO,GAAI,GAAG,CAAC;MACvE,IAAGF,IAAI,EAAC;QACJJ,KAAK,CAAC,OAAM,GAAI,IAAI,CAACJ,KAAK,CAACM,KAAK,CAAC,CAACI,QAAO,GAAI,UAAU,CAAC;QACxD,IAAI,CAACT,MAAK,GAAI,IAAI,CAACD,KAAK,CAACW,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;MAC7C,OAAO;QACHF,KAAK,CAAC,kBAAkB,CAAC;MAC7B;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}