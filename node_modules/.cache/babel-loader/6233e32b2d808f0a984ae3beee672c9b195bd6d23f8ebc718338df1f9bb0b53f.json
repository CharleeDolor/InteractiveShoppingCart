{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"button\", {\n    id: \"btnAction\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.bindAction(this.prod, this.item, this.index, this.list))\n  }, _toDisplayString(this.prod), 1 /* TEXT */);\n}","map":{"version":3,"names":["_createElementBlock","id","onClick","_cache","$event","$options","bindAction","prod","item","index","list"],"sources":["C:\\Users\\User\\Desktop\\InteractiveShoppingCart\\src\\components\\ActionButton.vue"],"sourcesContent":["<template>\r\n    <button id=\"btnAction\" @click=\"bindAction(\r\n        this.prod,\r\n        this.item,\r\n        this.index,\r\n        this.list\r\n    )\">{{ this.prod }}</button>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    props: {\r\n        prod: {\r\n            required: true,\r\n            type: String\r\n        },\r\n\r\n        item: {\r\n            required: true,\r\n            type: Object\r\n        },\r\n\r\n        index: {\r\n            type: Number\r\n        },\r\n\r\n        list: {\r\n            type: Array\r\n        }\r\n\r\n    },\r\n    methods: {\r\n\r\n        updateQuantity(items, index) {\r\n            let item = items[index];\r\n            let newQuantity = parseInt(prompt('Edit the quantity:', item.quantity));\r\n\r\n            if (!isNaN(newQuantity)) {\r\n                item.quantity = newQuantity;\r\n            } else {\r\n                alert(\"Invalid quantity\");\r\n                return;\r\n            }\r\n\r\n            alert(\"Successfully updated\");\r\n        },\r\n\r\n        removeItem(item, items, index) {\r\n            let willDelete = confirm(\"Deleting \" + item.name);\r\n            if (willDelete) {\r\n                items.splice(index, 1);\r\n                alert(item.name + \" successfully removed.\");\r\n            } else {\r\n                alert(\"Delete cancelled\");\r\n            }\r\n        },\r\n\r\n        addToCart(item) {\r\n            let qty = parseInt(prompt(\"Enter Quantity for \" + item.name + \": \"));\r\n\r\n            if (!isNaN(qty)) {\r\n                let isExist = false;\r\n                this.$addedToCart.forEach(each => {\r\n                    if (each.name === item.name) {\r\n                        each.quantity += qty;\r\n                        isExist = true;\r\n                    }\r\n                });\r\n\r\n                if (!isExist) {\r\n                    this.$addedToCart.push({ name: item.name, price: item.price, quantity: qty });\r\n                }\r\n\r\n                alert('Successfully added to cart');\r\n            } else {\r\n                alert('Invalid quantity');\r\n            }\r\n        },\r\n\r\n        updateItem(item) {\r\n            let previousName = item.name;\r\n            let newName = prompt('Enter the new name:', item.name);\r\n            let newPrice = parseFloat(prompt('Enter the new price:', item.price));\r\n\r\n            if (newName && !isNaN(newPrice)) {\r\n                item.name = newName;\r\n                item.price = newPrice;\r\n            } else {\r\n                alert('Update fail');\r\n                return;\r\n            }\r\n\r\n            this.$addedToCart.forEach(each => {\r\n                if (each.name === previousName) {\r\n                    each.name = newName;\r\n                    each.price = newPrice;\r\n                }\r\n            });\r\n\r\n            alert(\"Updated sucessfully\");\r\n        },\r\n\r\n        /**\r\n         * Bind an action based on the value of val parameter.\r\n         */\r\n        bindAction(\r\n            val,\r\n            item = { name: \"\", price: \"\" },\r\n            index = 0,\r\n            items = null\r\n        ) {\r\n            /**\r\n             * Check if val is equals to \"Update Quantity\".\r\n             * This means that this button is in update quantity mode\r\n             */\r\n            if (val === \"Update Quantity\") {\r\n\r\n                //execute updateQuantity method declared in this component\r\n                this.updateQuantity(items, index)\r\n            }\r\n\r\n            /**\r\n             * Check if val is equals to \"Remove\"\r\n             * This means that this button is in remove mode\r\n             */\r\n            if (val === \"Remove\") {\r\n                //execute removeItem method declared in this component\r\n                this.removeItem(item, items, index);\r\n            }\r\n\r\n            /**\r\n             * Check if val is equals to \"Remove\"\r\n             * This means that this button is in remove mode\r\n             */\r\n            if (val === \"Add To Cart\") {\r\n                //execute addToCart method declared in this component\r\n                this.addToCart(item);\r\n            }\r\n\r\n            if (val === \"Update\") {\r\n                //execute updateItem method declared in this component\r\n                this.updateItem(item)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</script>"],"mappings":";;uBACIA,mBAAA,CAK2B;IALnBC,EAAE,EAAC,WAAW;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,C,KAAgBC,IAAI,E,KAAgBC,IAAI,E,KAAgBC,KAAK,E,KAAgBC,I;2BAK3GH,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}