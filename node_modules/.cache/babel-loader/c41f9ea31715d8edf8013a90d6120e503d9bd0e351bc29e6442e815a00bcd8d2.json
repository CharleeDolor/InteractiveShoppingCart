{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-189e9673\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"taskList\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"All tasks\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Task Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Task Deadline\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Urgency\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Action\")], -1 /* HOISTED */));\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TaskModal = _resolveComponent(\"TaskModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.isModalVisible ? (_openBlock(), _createBlock(_component_TaskModal, {\n    key: 0,\n    action: \"Update\",\n    tasks: this.tasks,\n    isUpdate: true,\n    onClose: $options.closeModal\n  }, null, 8 /* PROPS */, [\"tasks\", \"onClose\"])) : _createCommentVNode(\"v-if\", true), _hoisted_2, _createElementVNode(\"table\", null, [_hoisted_3, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.tasks, (task, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index,\n      onClick: $event => $options.showModal(index)\n    }, [_createElementVNode(\"td\", null, _toDisplayString(task.taskName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(task.taskDate), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(task.taskPriority), 1 /* TEXT */), task.taskStatus ? (_openBlock(), _createElementBlock(\"td\", _hoisted_5, \"Finished\")) : (_openBlock(), _createElementBlock(\"td\", _hoisted_6, \"Not Finished\")), _createElementVNode(\"td\", {\n      onClick: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\"]))\n    }, [_createElementVNode(\"button\", {\n      onClick: $event => $options.deleteTask(index)\n    }, \" Delete \", 8 /* PROPS */, _hoisted_7)])], 8 /* PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","$data","isModalVisible","_createBlock","_component_TaskModal","action","tasks","isUpdate","onClose","$options","closeModal","_createCommentVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","task","index","onClick","$event","showModal","_toDisplayString","taskName","taskDate","taskPriority","taskStatus","_hoisted_5","_hoisted_6","_cache","_withModifiers","deleteTask","_hoisted_7","_hoisted_4"],"sources":["C:\\Users\\User\\Desktop\\case-study\\task-management-system\\src\\components\\TaskList.vue"],"sourcesContent":["<template>\r\n    <div class=\"taskList\">\r\n\r\n        <TaskModal v-if=\"isModalVisible\" \r\n            action=\"Update\" \r\n            :tasks=this.tasks \r\n            :isUpdate=true\r\n            @close=\"closeModal\" />\r\n\r\n        <h3>All tasks</h3>\r\n        <table>\r\n            <tr>\r\n                <th>Task Name</th>\r\n                <th>Task Deadline</th>\r\n                <th>Urgency</th>\r\n                <th>Status</th>\r\n                <th>Action</th>\r\n            </tr>\r\n\r\n            <tr \r\n                v-for=\"(task, index) in this.tasks\"\r\n                v-bind:key=\"index\"\r\n                @click=\"showModal(index)\">\r\n\r\n                <td>{{ task.taskName }}</td>\r\n                <td>{{ task.taskDate }}</td>\r\n                <td>{{ task.taskPriority }}</td>\r\n                <td v-if=\"task.taskStatus\">Finished</td>\r\n                <td v-else>Not Finished</td>\r\n                <td v-on:click.stop=\"\">\r\n                    <button @click=\"deleteTask(index)\">\r\n                        Delete\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport TaskModal from '@/components/TaskModal.vue';\r\n\r\nexport default {\r\n\r\n    components: {\r\n        TaskModal\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            tasks: this.$tasks,\r\n            isModalVisible: false,\r\n            index: 0\r\n        }\r\n    },\r\n\r\n    methods: {\r\n\r\n        showModal(index) {\r\n            this.index = index;\r\n            this.isModalVisible = true;\r\n        },\r\n        closeModal() {\r\n            this.isModalVisible = false;\r\n        },\r\n\r\n        deleteTask(index) {\r\n            /**\r\n             * if taskStatus is !false,\r\n             *  this means that this task is not done yet\r\n             *  and will not be able to delete\r\n             */\r\n            if (!this.tasks[index].taskStatus) {\r\n                alert(\"Task is unfinished\");\r\n                return;\r\n            }\r\n\r\n            let conf = confirm(\"Deleting task \" + this.tasks[index].taskName + \"?\");\r\n            if (conf) {\r\n                alert(\"Task \" + this.tasks[index].taskName + \" Deleted\");\r\n                this.$tasks = this.tasks.splice(index, 1);\r\n            } else {\r\n                alert(\"Delete cancelled\");\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.taskList {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n}\r\n</style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAU;gEAQjBC,mBAAA,CAAkB,YAAd,WAAS;gEAETA,mBAAA,CAMK,a,aALDA,mBAAA,CAAkB,YAAd,WAAS,G,aACbA,mBAAA,CAAsB,YAAlB,eAAa,G,aACjBA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAe,YAAX,QAAM,E;mBAhB1B;;EAAAC,GAAA;AAAA;;EAAAA,GAAA;AAAA;mBAAA;;;uBACIC,mBAAA,CAmCM,OAnCNC,UAmCM,GAjCeC,KAAA,CAAAC,cAAc,I,cAA/BC,YAAA,CAI0BC,oBAAA;IAPlCN,GAAA;IAIYO,MAAM,EAAC,QAAQ;IACdC,KAAK,OAAMA,KAAK;IAChBC,QAAQ,EAAC,IAAI;IACbC,OAAK,EAAEC,QAAA,CAAAC;mDAPpBC,mBAAA,gBASQC,UAAkB,EAClBf,mBAAA,CAyBQ,gBAxBJgB,UAMK,G,kBAELd,mBAAA,CAeKe,SAAA,QAlCjBC,WAAA,MAoB6CT,KAAK,EApBlD,CAoBwBU,IAAI,EAAEC,KAAK;yBADvBlB,mBAAA,CAeK;MAbMD,GAAG,EAAEmB,KAAK;MAChBC,OAAK,EAAAC,MAAA,IAAEV,QAAA,CAAAW,SAAS,CAACH,KAAK;QAEvBpB,mBAAA,CAA4B,YAAAwB,gBAAA,CAArBL,IAAI,CAACM,QAAQ,kBACpBzB,mBAAA,CAA4B,YAAAwB,gBAAA,CAArBL,IAAI,CAACO,QAAQ,kBACpB1B,mBAAA,CAAgC,YAAAwB,gBAAA,CAAzBL,IAAI,CAACQ,YAAY,kBACdR,IAAI,CAACS,UAAU,I,cAAzB1B,mBAAA,CAAwC,MA3BxD2B,UAAA,EA2B2C,UAAQ,M,cACnC3B,mBAAA,CAA4B,MA5B5C4B,UAAA,EA4B2B,cAAY,IACvB9B,mBAAA,CAIK;MAJIqB,OAAK,EAAAU,MAAA,QAAAA,MAAA,MA7B9BC,cAAA,CA6BoB,QAAkB;QAClBhC,mBAAA,CAES;MAFAqB,OAAK,EAAAC,MAAA,IAAEV,QAAA,CAAAqB,UAAU,CAACb,KAAK;OAAG,UAEnC,iBAhCpBc,UAAA,E,mBAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}